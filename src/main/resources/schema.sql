DROP VIEW IF EXISTS VIEW_PERMISSIONS;
DROP VIEW IF EXISTS VIEW_PRINCIPAL;
DROP TABLE IF EXISTS MAP_PRINCIPAL_REPO;
DROP TABLE IF EXISTS REPO;
DROP TABLE IF EXISTS PRINCIPAL;
DROP TABLE IF EXISTS PERSON;
DROP TABLE IF EXISTS APPLICATION;


CREATE TABLE PERSON (
    ID         INTEGER PRIMARY KEY,
    NAME_FIRST VARCHAR(20) NOT NULL,
    NAME_LAST  VARCHAR(20) NOT NULL
);

CREATE TABLE PRINCIPAL (
    ID                  INTEGER PRIMARY KEY,
    ID_PERSON_OWNER     INTEGER      NOT NULL,
    NAME                VARCHAR(256) NOT NULL,
    DATETIME_CREATED    DATETIME     NOT NULL,
    DATETIME_SUPERSEDED DATETIME,
    FOREIGN KEY (ID_PERSON_OWNER) REFERENCES PERSON(ID),
    UNIQUE (ID_PERSON_OWNER, NAME)
);

CREATE TABLE APPLICATION (
    ID         INTEGER PRIMARY KEY,
    NAME       VARCHAR(256) NOT NULL,
    IDENTIFIER VARCHAR(256) NOT NULL
);

CREATE TABLE REPO (
    ID                  INTEGER PRIMARY KEY,
    NAME                VARCHAR(256) NOT NULL,
    ID_APPLICATION      INTEGER      NOT NULL,
    DATETIME_CREATED    DATETIME     NOT NULL,
    DATETIME_SUPERSEDED DATETIME,
    FOREIGN KEY (ID_APPLICATION) REFERENCES APPLICATION(ID)
);

CREATE TABLE MAP_PRINCIPAL_REPO (
    ID                  INTEGER PRIMARY KEY,
    ID_PRINCIPAL        INTEGER      NOT NULL,
    ID_REPO             INTEGER      NOT NULL,
    PERMISSION          VARCHAR(256) NOT NULL,
    PERMISSION_BITS     INTEGER      NOT NULL,
    DATETIME_CREATED    DATETIME     NOT NULL,
    DATETIME_SUPERSEDED DATETIME,
    FOREIGN KEY (ID_PRINCIPAL) REFERENCES PRINCIPAL(ID),
    FOREIGN KEY (ID_REPO) REFERENCES REPO(ID)
);

CREATE OR REPLACE VIEW VIEW_PRINCIPAL AS
(
    SELECT P.ID AS ID_PERSON, P.NAME_LAST, P.NAME_FIRST, PR.ID AS ID_PRINCIPAL, PR.NAME AS PRINCIPAL
    FROM PRINCIPAL PR
             INNER JOIN PERSON P ON PR.ID_PERSON_OWNER = P.ID
);

CREATE OR REPLACE VIEW VIEW_PERMISSIONS AS
(
    SELECT VP.*,
        R.ID AS ID_REPO,
        R.NAME AS REPO,
        MPR.PERMISSION,
        MPR.PERMISSION_BITS
    FROM VIEW_PRINCIPAL VP
             LEFT JOIN MAP_PRINCIPAL_REPO MPR ON VP.ID_PRINCIPAL=MPR.ID_PRINCIPAL
             LEFT JOIN REPO R ON MPR.ID_REPO = R.ID
)